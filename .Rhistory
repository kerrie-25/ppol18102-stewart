gb_labour <- read.csv('gb_labour.csv')
us_house <- read.csv('us_house_of_reps.csv')
print(summary(gb_labour))
print(summary(us_house)
print(summary(us_house))
us_house$DemPctVotes
us_house$Year
compute_beta1 <- lm(us_house$Year, us_house$DemPctVotes)
ushouseDemVotes <- c(us_house$DemPctVotes)
ushouseyear <- c(us_house$Year)
compute_beta1 <- lm(usehouseyear, usehouseDemVotes)
compute_beta1 <- lm(ushouseyear, usehouseDemVotes)
compute_beta1 <- lm(ushouseyear, ushouseDemVotes)
compute_beta1 <- lm(ushouseyear ~ ushouseDemVotes)
View(compute_beta1)
compute_beta1 <- lm(us_house$Year ~ us_house$DemPctVotes)
compute_beta1again <- lm(us_house$Year ~ us_house$DemPctVotes)
beta(us_house$Year, us_house$DemPctVotes)
beta(ushouseDemVotes, ushouseyear)
beta(lm(us_house$Year, us_house$DemPctVotes))
beta1(compute_beta1)
compute_beta0 <- lm(us_house$Year ~ us_house$DemPctVotes, -2.181351)
?function(beta)
?function_(beta)
compute_beta1tryagain <- lm(us_house$Year, us_house$DemPctVotes, -2.181351)
View(gb_labour)
Year <- c(us_house$Year)
compute_betanow <- lm(Year ~ DemPctVotes)
DemPctVotes <- c(us_house$DemPctVotes)
compute_betanow <- lm(Year ~ DemPctVotes)
compute_beta0now <- lm(Year ~ DemPctVotes, compute_betanow)
plot(Year ~ DemPctVotes)
plot(Year ~ DemPctVotes)
abline(Year ~ DemPctVotes)
gb_labour <- read.csv('gb_labour.csv')
us_house <- read.csv('us_house_of_reps.csv')
print(summary(gb_labour))
print(summary(us_house))
ompute_beta1 <- beta.coef(us_house$Year ~ us_house$DemPctVotes)
compute_beta1 <- function(X,Y)
{
# This function computes the slope of our regression model.
# Inputs
#   X: a vector of values representing our independent variable.
#   Y: a vector of values representing our dependent variable.
# Outputs
#   a single number representing beta_1.
compute_beta1 <- lm.beta(us_house$Year ~ us_house$DemPctVotes)
}
compute_beta0 <- function(X,Y,beta_1)
{
# This function computes the y-intercept of our regression model.
# Inputs
#   X: a vector of values representing our independent variable.
#   Y: a vector of values representing our dependent variable.
#   beta_1: our slope value (regression coefficient)
# Outputs
#   a single number representing beta_0.
}
View(compute_beta0)
View(compute_beta1)
compute_beta1 <- lm(us_house$Year, us_house$DemPctVotes)
compute_beta1 <- lm(us_house$Year ~ us_house$DemPctVotes)
View(compute_beta1)
gb_labour <- read.csv('gb_labour.csv')
us_house <- read.csv('us_house_of_reps.csv')
print(summary(gb_labour))
print(summary(us_house))
model <- lm(us_house$Year ~ us_house$DemPctVotes)
gb_labour <- read.csv('gb_labour.csv')
us_house <- read.csv('us_house_of_reps.csv')
print(summary(gb_labour))
print(summary(us_house))
odel <- lm(us_house$Year ~ us_house$DemPctVotes)
compute_beta1(odel)
compute_beta1 <- function(X,Y)
compute_beta1 <- (us_house$Year, us_house$DemPctVotes)
compute_beta1 <- function(us_house$Year ~ us_house$DemPctVotes)
model <- lm(us_house$Year ~ us_house$DemPctVotes)
coef(model)
compute_beta1 <- coef(model)
compute_beta0 <- coef(X,Y,beta_1)
compute_beta0 <- coef(model + beta_1)
compute_beta0 <- coef(model, beta_1)
beta1 <- compute_beta1(model)
compute_beta0 <- function(X,Y,beta_1)
data(iris)
mod1 <- lm(Sepal.Length ~ Sepal.Width + Petal.Length, data=iris)
mod2 <- lm(I(Sepal.Length/10) ~ Sepal.Width + Petal.Length, data=iris)
print(summary(mod1))
print(summary(mod2))
data(iris)
mod1 <- lm(Sepal.Length ~ Sepal.Width + Petal.Length, data=iris)
mod2 <- lm(Sepal.Length ~ I(Sepal.Width*10) + Petal.Length, data=iris)
print(summary(mod1))
print(summary(mod2))
data(iris)
mod1 <- lm(Sepal.Length ~ Sepal.Width + Petal.Length, data=iris)
iris$Sepal.Width.std <- (iris$Sepal.Width-mean(iris$Sepal.Width))/sd(iris$Sepal.Width)
iris$Petal.Length.std <- (iris$Petal.Length - mean(iris$Petal.Length))/sd(iris$Petal.Length)
mod2 <- lm(Sepal.Length ~ Sepal.Width.std + Petal.Length.std, data=iris)
summary(mod1)
summary(mod2)
plot(iris$Petal.Width, iris$Sepal.Width, col=iris$Species)
plot(log(iris$Petal.Width+1), iris$Sepal.Width, col=iris$Species)
mod <- lm(Sepal.Width ~ log(Petal.Width+1), data=iris)
plot(log(iris$Petal.Width+1), iris$Sepal.Width, col=iris$Species)
abline(mod)
plot(iris$Petal.Width, iris$Sepal.Width, col=iris$Species)
lines(seq(0,3,length.out=10),
predict(mod,
newdata=data.frame("Petal.Width"=seq(0,3,length.out=10))))
mod <- lm(Sepal.Width ~ Petal.Width + I(Petal.Width^2), data=iris)
plot(iris$Petal.Width, iris$Sepal.Width, col=iris$Species)
lines(seq(0,3,length.out=10),
predict(mod,
newdata=data.frame("Petal.Width"=seq(0,3,length.out=10))))
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species)
modelA <- lm(iris$Sepal.Width~iris$Sepal.Length)
summary(modelA)
plot(iris$Sepal.Length, iris$Sepal.Width)
abline(lm(iris$Sepal.Width~iris$Sepal.Length))
newX <- 3:9
newiris <- data.frame(Sepal.Length=newX)
irispreds <- predict(modelA, newdata=newiris, se.fit=TRUE)
head(irispreds)
newX <- 3:9
newiris <- data.frame(Sepal.Length=newX)
irispreds <- predict(modelA, newdata=newiris, se.fit=TRUE)
head(irispreds)
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species)
lines(x=newX, y=irispreds$fit, lwd=2)
modelA <- lm(Sepal.Width ~ Sepal.Length, data=iris)
summary(modelA)
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species)
abline(lm(iris$Sepal.Width~iris$Sepal.Length))
newX <- 3:9
newiris <- data.frame(Sepal.Length=newX)
irispreds <- predict(modelA, newdata=newiris, se.fit=TRUE)
head(irispreds)
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species)
lines(x=newX, y=irispreds$fit, lwd=2)
lines(x=newX, y=irispreds$fit + 1.96 * irispreds$se.fit, lty=2)
lines(x=newX, y=irispreds$fit - 1.96 * irispreds$se.fit, lty=2)
iris$setosa = iris$Species == "setosa"
iris$setosa[iris$setosa == TRUE] <- 1
iris$setosa[iris$setosa == FALSE] <- 0
iris$setosa = iris$Species == "setosa"
iris$setosa[iris$setosa == TRUE] <- 1
iris$setosa[iris$setosa == FALSE] <- 0
iris$setosa = iris$Species == "setosa"
iris$setosa[iris$setosa == TRUE] <- 1
iris$setosa[iris$setosa == FALSE] <- 0
iris
iris$setosa = iris$Species == "setosa"
iris$setosa[iris$setosa == TRUE] <- 1
iris$setosa[iris$setosa == FALSE] <- 0
iris$virginica = iris$Species == "virginica"
iris$virginica[iris$virginica == TRUE] <- 1
iris$virginica[iris$virginica == FALSE] <- 0
iris
modelB <- lm(Sepal.Width ~ Sepal.Length + setosa + virginica)
modelB <- lm(Sepal.Width ~ Sepal.Length + setosa + virginica, data=iris)
modelB <- lm(Sepal.Width ~ Sepal.Length + setosa + virginica, data=iris)
summary(modelB)
setosa_intercept <- 0.29
virginica_intercept <- 0.71
versicolor_intercept <- 0.69
sepal_length_slope <- 0.35
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species)
abline(a=setosa_intercept, b=sepal_length_slope, col="black")
abline(a=virginica_intercept, b=sepal_length_slope, col="black")
abline(a=versicolor_intercept, b=sepal_length_slope, col="black")
modelC <- lm(Sepal.Width ~ Sepal.Length + setosa + virginica + Sepal.Length : setosa + Sepal.Length : virginica)
modelC <- lm(Sepal.Width ~ Sepal.Length + setosa + virginica + Sepal.Length : setosa + Sepal.Length : virginica, data=iris)
modelC <- lm(Sepal.Width ~ Sepal.Length + setosa + virginica + Sepal.Length : setosa + Sepal.Length : virginica, data=iris)
summary(modelC)
setosa_interaction_intercept <- -0.57
setosa_interaction_slope <- 0.80
virginica_interaction_intercept <- 1.44
virginica_interaction_slope <- 0.23
versicolor_interaction_intercept <- 0.87
versicolor_interaction_slope <- 0.32
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species)
abline(a=setosa_intercept, b=sepal_length_slope, col="black")
abline(a=virginica_intercept, b=sepal_length_slope, col="blue")
abline(a=versicolor_intercept, b=sepal_length_slope, col="yellow")
modelD <- lm(Sepal.Width ~ Sepal.Length + setosa:Sepal.Length + virginica:Sepal.Length, data=iris)
summary(modelD)
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species)
abline(a=setosa_intercept, b=sepal_length_slope, col="black")
abline(a=virginica_intercept, b=sepal_length_slope, col="blue")
abline(a=versicolor_intercept, b=sepal_length_slope, col="yellow")
library(rstanarm)
library(rstan)
knitr::opts_chunk$set(echo = TRUE)
install.packages("rstanarm")
install.packages("rstan")
knitr::opts_chunk$set(echo = TRUE)
install.packages("rstanarm")
install.packages("rstan")
install.packages("rstanarm", repos = "https://cran.r-project.org/")
setwd("~/ppol18102-stewart")
install.packages("rstanarm")
install.packages("rstan")
options(repos = c(CRAN = "https://cran.r-project.org/"))
